import 'dart:async';
import 'package:ethereumthermostat/models/heater.dart';
import 'package:ethereumthermostat/models/room.dart';
import 'package:ethereumthermostat/models/sensor.dart';
import 'package:ethereumthermostat/utils/prefs_util.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:logger/logger.dart';
import 'package:web3dart/web3dart.dart';
import 'package:convert/convert.dart';

class ThermostatContract with ChangeNotifier {
  static const THERMOSTAT_ABI_ASSET = 'assets/abi/thermostat_abi.json';

  var logger = Logger();

  bool _initialized;
  bool _roomsInitialized;

  bool _processing;
  String _currentTask;

  Web3Client _web3client;
  EthereumAddress _ethAddress;
  String _hexAddress;

  ContractFunction _destroyFun;
  ContractFunction _shutDownFun;
  ContractFunction _changeThreshold;
  ContractFunction _communicateStatus;
  ContractFunction _initializeHeaterAddress;
  ContractFunction _initializeSensorAddress;
  ContractFunction _initializeUserAddress;
  ContractFunction _isReady;
  ContractFunction _initializeThreshold;
  ContractEvent _actualStatusChangedEvent;
  ContractEvent _actualTempChangedEvent;
  ContractEvent _destroyChangedEvent;
  ContractEvent _shutDownChangedEvent;
  ContractEvent _thresholdChangedEvent;
  StreamSubscription<FilterEvent> _actualStatusChangedEventSubscription;
  StreamSubscription<FilterEvent> _actualTempChangedEventSubscription;
  StreamSubscription<FilterEvent> _distruptChangedEventSubscription;
  StreamSubscription<FilterEvent> _shutDownChangedEventSubscription;
  StreamSubscription<FilterEvent> _thresholdChangedEventSubscription;

  DeployedContract _contract;
  List<Room> rooms;
  bool _shutDown;
  bool _distrupt;
  int _averageTemperature;
  int _threshold;


  ThermostatContract(Web3Client client,) {
    _web3client = client;
    _init();
  }

  //          set
  set setShutDown(bool shutDown) {
    _shutDown = shutDown;
    notifyListeners();
  }

  set setDistrupt(bool distrupt) {
    _distrupt = distrupt;
    notifyListeners();
  }

  set setHexAddress(String hexAddress) {
    _hexAddress = hexAddress;
    notifyListeners();
  }

  set setEthAddress(EthereumAddress ethAddress) {
    _ethAddress = ethAddress;
    notifyListeners();
  }

  set setAverageTemperature(int averageTemperature) {
    _averageTemperature = averageTemperature;
    notifyListeners();
  }

  set setInitialized(bool initialized) {
    _initialized = initialized;
    notifyListeners();
  }

  set setProcessing(bool processing) {
    _processing = processing;
    notifyListeners();
  }

  set setCurrentTask(String currentTask) {
    _currentTask = currentTask;
    notifyListeners();
  }

  set setRoomsInitialized(bool roomInitialized) {
    _roomsInitialized = roomInitialized;
    notifyListeners();
  }

  //         get
  DeployedContract get contract => _contract;

  bool get shutDown => _shutDown;

  bool get distrupt => _distrupt;

  String get hexAddress => _hexAddress;

  bool get initialized => _initialized;

  int get averageTemperature => _averageTemperature;

  int get threshold => _threshold;

  bool get processing => _processing;

  String get currentTask => _currentTask;

  bool get roomsInitialized => _roomsInitialized;

  void removeThermostat() {
    setTaskInfo(true, 'Removing thermostat');
    setHexAddress = '';
    setEthAddress = null;
    setInitialized = false;
    setRoomsInitialized = false;
    rooms.clear();
    saveContractAddress('');
    endTask();
  }

  void deployNewContract(Credentials creds) async {
    try {
      setTaskInfo(true, 'Deploying contract');
      final Transaction transaction = Transaction(
          to: null,
          from: await creds.extractAddress(),
          data: hex.decode("60806040526000601060006101000a81548160ff0219169083151502179055506000601060016101000a81548160ff0219169083151502179055503480156200004757600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060600160405280600081526020016000815260200160008152506011600060028110620000b557fe5b6004020160008201518160000155602082015181600101556040820151816002015590505060006002600060028110620000eb57fe5b6003020160010181905550600060096000600281106200010757fe5b600302016001018190555060405180606001604052806001815260200160018152602001600181525060116001600281106200013f57fe5b60040201600082015181600001556020820151816001015560408201518160020155905050600160026001600281106200017557fe5b6003020160010181905550600160096001600281106200019157fe5b6003020160010181905550620001ac620001b360201b60201c565b50620004a8565b6000601060019054906101000a900460ff161562000239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f456e64656420636f6e747261637400000000000000000000000000000000000081525060200191505060405180910390fd5b60005b6002811015620002ca57600073ffffffffffffffffffffffffffffffffffffffff16600282600281106200026c57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620002bc57600091505062000372565b80806001019150506200023c565b5060005b60028110156200035c57600073ffffffffffffffffffffffffffffffffffffffff1660098260028110620002fe57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156200034e57600091505062000372565b8080600101915050620002ce565b506200036d6200037560201b60201c565b600190505b90565b601060009054906101000a900460ff16620004315760005b6002811015620003e857620003da7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffce95810e60118360028110620003ca57fe5b600402016200043360201b60201c565b80806001019150506200038d565b506001601060006101000a81548160ff0219169083151502179055507fb6b49146609ca7b82407ba2c0a14cf5a9e1bf0bee2f279aadf259fa97ad20dab60405160405180910390a15b565b600181600301600084815260200190815260200160002060006101000a81548160ff0219169083151502179055507f056c4cb102466f2fc174921fb78572e92ee725a98f7ca122b5e997e8f2f90436828260020154604051808381526020018281526020019250505060405180910390a15050565b612ffc80620004b86000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637aa67bf61161010f578063ac19a0ac116100a2578063d1e485be11610071578063d1e485be146106c9578063ed485e68146106d3578063f2fde38b146106dd578063fcd9d0d414610721576101f0565b8063ac19a0ac14610621578063c9b4156c1461062b578063cbd7d6b914610635578063cdcef10214610663576101f0565b80639e2c4260116100de5780639e2c426014610563578063a094a031146105b3578063a4fd6f56146105d3578063a97d32c4146105f3576101f0565b80637aa67bf61461050157806383197ef01461052f57806386ec61771461054f5780638cb15c7c14610559576101f0565b80634a523bd91161018757806355ef73eb1161015657806355ef73eb1461042d57806368f0b5981461043757806376a83d2c1461047b57806376aa77df146104a9576101f0565b80634a523bd9146103c55780634f8632ba146103cf578063544736e614610403578063550d9fdc14610423576101f0565b80632c1631ab116101c35780632c1631ab146103175780633d1e724c146103215780633f6139471461037957806342cde4e8146103a7576101f0565b806302ba5298146101f557806310b9e5831461024357806318448d21146102635780631b3523f3146102c9575b600080fd5b6102416004803603604081101561020b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061072b565b005b61024b610890565b60405180821515815260200191505060405180910390f35b61028f6004803603602081101561027957600080fd5b81019080803590602001909291905050506108a3565b604051808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b610315600480360360408110156102df57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506108f0565b005b61031f610a55565b005b6103636004803603602081101561033757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c80565b6040518082815260200191505060405180910390f35b6103a56004803603602081101561038f57600080fd5b8101908080359060200190929190505050610c98565b005b6103af610f65565b6040518082815260200191505060405180910390f35b6103cd610f6b565b005b6103d7611106565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61040b61112c565b60405180821515815260200191505060405180910390f35b61042b61113f565b005b610435611358565b005b6104796004803603602081101561044d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506114ea565b005b6104a76004803603602081101561049157600080fd5b81019080803590602001909291905050506115f8565b005b6104eb600480360360208110156104bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116a1565b6040518082815260200191505060405180910390f35b61052d6004803603602081101561051757600080fd5b81019080803590602001909291905050506116b9565b005b610537611996565b60405180821515815260200191505060405180910390f35b6105576119a9565b005b6105616119c6565b005b61058f6004803603602081101561057957600080fd5b8101908080359060200190929190505050611aca565b60405180848152602001838152602001828152602001935050505060405180910390f35b6105bb611af7565b60405180821515815260200191505060405180910390f35b6105db611ca6565b60405180821515815260200191505060405180910390f35b61061f6004803603602081101561060957600080fd5b8101908080359060200190929190505050611cb9565b005b610629611d62565b005b610633612061565b005b6106616004803603602081101561064b57600080fd5b81019080803590602001909291905050506121fc565b005b61068f6004803603602081101561067957600080fd5b81019080803590602001909291905050506122a5565b604051808473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390f35b6106d16122f2565b005b6106db6124ef565b005b61071f600480360360208110156106f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506127c4565b005b610729612943565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f41646472657373206e6f742076616c696400000000000000000000000000000081525060200191505060405180910390fd5b80600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816009826002811061083e57fe5b6003020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061088b611af7565b505050565b601a60009054906101000a900460ff1681565b600281600281106108b057fe5b600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f41646472657373206e6f742076616c696400000000000000000000000000000081525060200191505060405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160028260028110610a0357fe5b6003020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a50611af7565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b19576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41646472657373206e6f7420616c6c6f7765640000000000000000000000000081525060200191505060405180910390fd5b6000805b6002811015610c0057610b4463026d9aed60118360028110610b3b57fe5b60040201612c42565b15610bf35781610bb657600191506000601a60006101000a81548160ff0219169083151502179055507f3af632aea9ece122697e087661f1bc69112ad24367846cce4ab85bd8da76ef90601a60009054906101000a900460ff1660405180821515815260200191505060405180910390a15b610bd463026d9aed60118360028110610bcb57fe5b60040201612c6f565b610bf2630663795260118360028110610be957fe5b60040201612ce4565b5b8080600101915050610b1d565b5080610c74576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b610c7c6124ef565b5050565b600f6020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41646472657373206e6f7420616c6c6f7765640000000000000000000000000081525060200191505060405180910390fd5b6000805b6002811015610eec57610da37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffce95810e60118360028110610d9a57fe5b60040201612c42565b15610edf5781610df25760019150836019819055507f08f4c10b35800d5c230b49c9f3b13a4a5691f7d77b2e2e67dbf9e4d3bdbaab4d6019546040518082815260200191505060405180910390a15b610e2c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffce95810e60118360028110610e2357fe5b60040201612c6f565b610e667ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdf8905c60118360028110610e5d57fe5b60040201612ce4565b610e7f60118260028110610e7657fe5b60040201612d59565b73ffffffffffffffffffffffffffffffffffffffff1663ed6050e56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ec657600080fd5b505af1158015610eda573d6000803e3d6000fd5b505050505b8080600101915050610d60565b5080610f60576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b505050565b60195481565b6000805b600281101561108f57610fb27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8254f660118360028110610fa957fe5b60040201612c42565b156110825781610fc157600191505b610ffb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8254f660118360028110610ff257fe5b60040201612c6f565b6110146011826002811061100b57fe5b60040201612d9b565b73ffffffffffffffffffffffffffffffffffffffff16631bfcc5cf60016040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561106957600080fd5b505af115801561107d573d6000803e3d6000fd5b505050505b8080600101915050610f6f565b5080611103576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b6000806000805b60028110156112c1576111897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffa003fd1a6011836002811061118057fe5b60040201612c42565b156112b4578161119857600191505b6111d27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffa003fd1a601183600281106111c957fe5b60040201612c6f565b6002601182600281106111e157fe5b6004020160000154600281106111f357fe5b6003020160020154601954136112425761123d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffedaa59f86011836002811061123457fe5b60040201612ce4565b600192505b60026011826002811061125157fe5b60040201600001546002811061126357fe5b600302016002015460195413156112b3576112ae7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8254f6601183600281106112a557fe5b60040201612ce4565b600193505b5b8080600101915050611146565b5080611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b811561134457611343612061565b5b821561135357611352610f6b565b5b505050565b60008060005b6002811015611463576113a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffb94d0c226011836002811061139857fe5b60040201612c42565b1561145657816113b057600191505b6113ea7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffb94d0c22601183600281106113e157fe5b60040201612c6f565b601a60009054906101000a900460ff161561141e5761141d63026d9aed6011836002811061141457fe5b60040201612ce4565b5b601a60009054906101000a900460ff166114555761145063066379526011836002811061144757fe5b60040201612ce4565b600192505b5b808060010191505061135e565b50806114d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b81156114e6576114e56124ef565b5b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f41646472657373206e6f742076616c696400000000000000000000000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506115f4611af7565b5050565b600061160333612ddd565b90508161160f33612e03565b600201819055507fca937e881ea9eb9a528b6254f0cd5e82e24e7233288138a45ff62c5da411d61f8233604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16116957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffa003fd1a82612ce4565b61169d61113f565b5050565b60086020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461177d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41646472657373206e6f7420616c6c6f7765640000000000000000000000000081525060200191505060405180910390fd5b6000805b600281101561190d576117c47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbda21cec601183600281106117bb57fe5b60040201612c42565b1561190057816118135760019150836019819055507f08f4c10b35800d5c230b49c9f3b13a4a5691f7d77b2e2e67dbf9e4d3bdbaab4d6019546040518082815260200191505060405180910390a15b61184d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbda21cec6011836002811061184457fe5b60040201612c6f565b6118666011826002811061185d57fe5b60040201612d59565b73ffffffffffffffffffffffffffffffffffffffff16638cb15c7c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118ad57600080fd5b505af11580156118c1573d6000803e3d6000fd5b505050506118ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffa003fd1a601183600281106118f657fe5b60040201612ce4565b5b8080600101915050611781565b5080611981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b61198961113f565b6119916119c6565b505050565b601a60019054906101000a900460ff1681565b6001601060016101000a81548160ff021916908315150217905550565b60005b6002811015611ac757611a0c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc821197960118360028110611a0357fe5b60040201612c6f565b611a467fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbda21cec60118360028110611a3d57fe5b60040201612c6f565b611a807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbb6bd6760118360028110611a7757fe5b60040201612c6f565b611aba7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc7865b9860118360028110611ab157fe5b60040201612c6f565b80806001019150506119c9565b50565b60118160028110611ad757fe5b600402016000915090508060000154908060010154908060020154905083565b6000601060019054906101000a900460ff1615611b7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f456e64656420636f6e747261637400000000000000000000000000000000000081525060200191505060405180910390fd5b60005b6002811015611c0857600073ffffffffffffffffffffffffffffffffffffffff1660028260028110611bad57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611bfb576000915050611ca3565b8080600101915050611b7f565b5060005b6002811015611c9557600073ffffffffffffffffffffffffffffffffffffffff1660098260028110611c3a57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c88576000915050611ca3565b8080600101915050611c0c565b50611c9e612e5c565b600190505b90565b601060019054906101000a900460ff1681565b6000611cc433612ddd565b905081611cd033612e03565b600201819055507fca937e881ea9eb9a528b6254f0cd5e82e24e7233288138a45ff62c5da411d61f8233604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1611d567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffa003fd1a82612ce4565b611d5e61113f565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e26576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41646472657373206e6f7420616c6c6f7765640000000000000000000000000081525060200191505060405180910390fd5b6000805b6002811015611fd957611e6d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc7865b9860118360028110611e6457fe5b60040201612c42565b15611fcc5781611edf57600191506001601a60016101000a81548160ff0219169083151502179055507f974e3f94e92990a6e6ad6c9e685194e1e73582b90d4b11650a9a5caf45e366fc601a60019054906101000a900460ff1660405180821515815260200191505060405180910390a15b611f197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc7865b9860118360028110611f1057fe5b60040201612c6f565b611f3260118260028110611f2957fe5b60040201612d59565b73ffffffffffffffffffffffffffffffffffffffff16638cb15c7c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611f7957600080fd5b505af1158015611f8d573d6000803e3d6000fd5b50505050611fcb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffedaa59f860118360028110611fc257fe5b60040201612ce4565b5b8080600101915050611e2a565b508061204d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b612055612061565b61205d6119c6565b5050565b6000805b6002811015612185576120a87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffedaa59f86011836002811061209f57fe5b60040201612c42565b1561217857816120b757600191505b6120f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffedaa59f8601183600281106120e857fe5b60040201612c6f565b61210a6011826002811061210157fe5b60040201612d9b565b73ffffffffffffffffffffffffffffffffffffffff166304fa03f760006040518263ffffffff1660e01b8152600401808215158152602001915050600060405180830381600087803b15801561215f57600080fd5b505af1158015612173573d6000803e3d6000fd5b505050505b8080600101915050612065565b50806121f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b600061220733612f0e565b90508161221333612f34565b600201819055507f3544ef07f543a043eabd292a4eb045e92fbe9371cbdb09af7796d1187c9145b98233604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a16122997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffb94d0c2282612ce4565b6122a1611358565b5050565b600981600281106122b257fe5b600302016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154905083565b6000805b6002811015612478576123397fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbee8c706011836002811061233057fe5b60040201612c42565b1561246b578161234857600191505b6123827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbee8c706011836002811061237957fe5b60040201612c6f565b6123bc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8211979601183600281106123b357fe5b60040201612ce4565b6123f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffbda21cec601183600281106123ed57fe5b60040201612ce4565b6124307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbb6bd676011836002811061242757fe5b60040201612ce4565b61246a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc7865b986011836002811061246157fe5b60040201612ce4565b5b80806001019150506122f6565b50806124ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b50565b6000806000805b600281101561272d5761251d63066379526011836002811061251457fe5b60040201612c42565b15612720578161252c57600191505b61254a63066379526011836002811061254157fe5b60040201612c6f565b601a60019054906101000a900460ff16612615576125987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbee8c706011836002811061258f57fe5b60040201612ce4565b6125b1601182600281106125a857fe5b60040201612d59565b73ffffffffffffffffffffffffffffffffffffffff1663d1e485be6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156125f857600080fd5b505af115801561260c573d6000803e3d6000fd5b50505050600192505b601a60019054906101000a900460ff161561271f576126436011826002811061263a57fe5b60040201612d9b565b73ffffffffffffffffffffffffffffffffffffffff166386ec61776040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561268a57600080fd5b505af115801561269e573d6000803e3d6000fd5b505050506126bb601182600281106126b257fe5b60040201612d59565b73ffffffffffffffffffffffffffffffffffffffff166386ec61776040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561270257600080fd5b505af1158015612716573d6000803e3d6000fd5b50505050600193505b5b80806001019150506124f6565b50806127a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b81156127b0576127af6122f2565b5b82156127bf576127be6119a9565b5b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612885576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f41646472657373206e6f742076616c696400000000000000000000000000000081525060200191505060405180910390fd5b61288e81612f8d565b612900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f41646472657373206e6f742076616c696400000000000000000000000000000081525060200191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a07576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f41646472657373206e6f7420616c6c6f7765640000000000000000000000000081525060200191505060405180910390fd5b6000805b6002811015612bba57612a4e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbb6bd6760118360028110612a4557fe5b60040201612c42565b15612bad5781612ac057600191506001601a60006101000a81548160ff0219169083151502179055507f3af632aea9ece122697e087661f1bc69112ad24367846cce4ab85bd8da76ef90601a60009054906101000a900460ff1660405180821515815260200191505060405180910390a15b612afa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffcbb6bd6760118360028110612af157fe5b60040201612c6f565b612b1360118260028110612b0a57fe5b60040201612d59565b73ffffffffffffffffffffffffffffffffffffffff16638cb15c7c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612b5a57600080fd5b505af1158015612b6e573d6000803e3d6000fd5b50505050612bac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffedaa59f860118360028110612ba357fe5b60040201612ce4565b5b8080600101915050612a0b565b5080612c2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f7420656e61626c656400000000000000000000000000000000000000000081525060200191505060405180910390fd5b612c36612061565b612c3e6119c6565b5050565b600081600301600084815260200190815260200160002060009054906101000a900460ff16905092915050565b600081600301600084815260200190815260200160002060006101000a81548160ff0219169083151502179055507f505a34b53d71442a6eccaaa71510825d4543ed8149451e4bf16a4e1d69c13284828260020154604051808381526020018281526020019250505060405180910390a15050565b600181600301600084815260200190815260200160002060006101000a81548160ff0219169083151502179055507f056c4cb102466f2fc174921fb78572e92ee725a98f7ca122b5e997e8f2f90436828260020154604051808381526020018281526020019250505060405180910390a15050565b60006002826000015460028110612d6c57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006009826001015460028110612dae57fe5b6003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006011612dea83612e03565b6001015460028110612df857fe5b600402019050919050565b60006002600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460028110612e5157fe5b600302019050919050565b601060009054906101000a900460ff16612f0c5760005b6002811015612ec357612eb67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffce95810e60118360028110612ead57fe5b60040201612ce4565b8080600101915050612e73565b506001601060006101000a81548160ff0219169083151502179055507fb6b49146609ca7b82407ba2c0a14cf5a9e1bf0bee2f279aadf259fa97ad20dab60405160405180910390a15b565b60006011612f1b83612f34565b6001015460028110612f2957fe5b600402019050919050565b60006009600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460028110612f8257fe5b600302019050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415905091905056fea264697066735822122088a87b957762ae6db42e2adf985e6df08a7703bc67d5f85078ce05920955814164736f6c634300060c0033"),
          maxGas: 6000000
      );
      final transactionId = await _web3client.sendTransaction(
          creds,
          transaction,
          fetchChainIdFromNetworkId: true);

      print('Contract transaction created: ' + transactionId);
      checkContractTransaction(Duration(seconds: 5), transactionId, creds).listen((event) {});
    }
    catch (e) {
      logger.e('Deploying contract error : ' + e.toString());
      endTask();
    }
  }

  Stream<String> checkContractTransaction(Duration interval, String transactionHex, Credentials creds) async* {
    try {
      while (true) {
        await Future.delayed(interval);
        TransactionReceipt transactionReceipt = await _web3client.getTransactionReceipt(transactionHex);
        if(transactionReceipt != null && transactionReceipt.contractAddress != null) {
          await saveContractAddress(transactionReceipt.contractAddress.hex);
          await initializeNewContract(creds, transactionReceipt.contractAddress);
          break;
        } else {
          print('Transaction receipt null');
        }
      }
    }
    catch (e) {
      logger.e(('Error while waiting transaction receipt : ' + e.toString()));
      setProcessing = false;
    }
  }

  Stream<bool> chekcTransactionReceipt(Duration interval, String transactionHex, String transactionName) async* {
    while (true) {
      await Future.delayed(interval);
      TransactionReceipt transactionReceipt = await _web3client.getTransactionReceipt(transactionHex);
      if(transactionReceipt != null && transactionReceipt.blockHash != null) {
        yield true;
        break;
      } else {
        yield false;
      }
    }
  }

  Future<void> initializeNewContract(Credentials creds, EthereumAddress contractAddress) async {
    try {
      final jsonData = await rootBundle.loadString(THERMOSTAT_ABI_ASSET);
      _contract = DeployedContract(
        ContractAbi.fromJson(jsonData, 'Thermostat'),
        contractAddress,
      );
      setEthAddress = _contract.address;
      endTask();
      logger.i('New contract deployed locally : ' + _contract.address.toString());

      notifyListeners();
      await initContractElements();
      initializeUserAddress(creds, await creds.extractAddress());
    }
    catch (e) {
      logger.e(('Failed to initialize new Contract' + e.toString()));
    }
  }

  void deployExistingContract() async {
    final jsonData = await rootBundle.loadString(THERMOSTAT_ABI_ASSET);
    _contract = DeployedContract(
      ContractAbi.fromJson(jsonData, 'Thermostat'),
      _ethAddress,
    );
    print('Existing contract deployed: ' + _contract.address.toString());
    endTask();
    notifyListeners();
    initContractElements();
    setInitialized = true;
  }

  HeaterModel getHeater(int heaterId) {
    return rooms.where((room) => room.heater.heaterId == heaterId).first.heater;
  }

  SensorModel getSensor(int sensorId) {
    return rooms.where((room) => room.sensor.sensorId == sensorId).first.sensor;
  }

  void addRoom(Room room) {
    rooms.add(room);
    notifyListeners();

    checkRoomsInitialized();
  }

  void checkRoomsInitialized() {
    if(rooms.length == 2) {
      setRoomsInitialized = true;
    }
  }

  Future<void> initContractElements() async {

    // Function
    _shutDownFun = _contract.function('requestShutDown');
    _changeThreshold = _contract.function('changeThreshold');
    _destroyFun = _contract.function('requestDestroy');
    _initializeHeaterAddress = _contract.function('initializeHeaterAddress');
    _initializeSensorAddress = _contract.function('initializeSensorAddress');
    _initializeUserAddress = _contract.function('initializeUserAddress');
    _initializeThreshold = _contract.function('initializeThreshold');
    _isReady = _contract.function('isReady');

    // Events
    _thresholdChangedEvent = _contract.event('thresholdChanged');
    _thresholdChangedEventSubscription?.cancel();
    //subscribe to event change threshold
    _thresholdChangedEventSubscription = _web3client
        .events(FilterOptions.events(
        contract: contract, event: _thresholdChangedEvent))
        .listen((event) {
      final decoded =
      _thresholdChangedEvent.decodeResults(event.topics, event.data);

      _threshold = decoded[0] as int;

      notifyListeners();
      print('Threshold changed : $_threshold');
    });

    _actualStatusChangedEvent = _contract.event('actualStatusChanged');
    _actualStatusChangedEventSubscription?.cancel();
    _actualStatusChangedEventSubscription = _web3client
        .events(FilterOptions.events(contract: contract, event: _actualStatusChangedEvent))
        .listen((event) {
      final decoded = _actualStatusChangedEvent.decodeResults(event.topics, event.data);
      //heaters.where((element) => element.heaterId == decoded[1]).map((e) => e.setHeaterStatus = decoded[0]);

      notifyListeners();
      print('Heater ' + decoded[1] + ' status changed : ' + decoded[0]);
    });

    _actualTempChangedEvent = _contract.event('actualTempChanged');
    _actualTempChangedEventSubscription?.cancel();
    _actualTempChangedEventSubscription = _web3client
        .events(FilterOptions.events(contract: contract, event: _actualTempChangedEvent))
        .listen((event) {
      final decoded = _actualTempChangedEvent.decodeResults(event.topics, event.data);
      //sensors.where((element) => element.sensorId == decoded[1]).map((e) => e.setSensorId = decoded[0]);

      notifyListeners();
      print('Sensor ' + decoded[1] + ' temp changed : ' + decoded[0]);
    });

    _destroyChangedEvent = contract.event('destroyChanged');
    _distruptChangedEventSubscription?.cancel();
    _distruptChangedEventSubscription = _web3client
        .events(FilterOptions.events(contract: contract, event: _destroyChangedEvent))
        .listen((event) {
      final decoded = _destroyChangedEvent.decodeResults(event.topics, event.data);
      setDistrupt = decoded[0];

      notifyListeners();
      print('Destroyed : ' + decoded[0]);
    });

    _shutDownChangedEvent = contract.event('shutDownChanged');
    _shutDownChangedEventSubscription?.cancel();
    _shutDownChangedEventSubscription = _web3client
        .events(FilterOptions.events(contract: contract, event: _shutDownChangedEvent))
        .listen((event) {
      final decoded = _shutDownChangedEvent.decodeResults(event.topics, event.data);
      setShutDown = decoded[0];

      notifyListeners();
      print('Shutted down : ' + decoded[0]);
    });
    setAverageTemperature = getAverageTemperature();
    notifyListeners();
  }

  /// Initialize
  _init() {
    rooms = List();
    notifyListeners();

    setInitialized = false;
    setRoomsInitialized = false;

    checkIstance();
  }

  saveContractAddress(String address) async {
    try {
      setTaskInfo(true, 'Saving contract key');
      await PreferencesUtil().setPrefsString('contract_key', address);
      endTask();
    }
    catch (e) {
      logger.e('Error while save contract key : ' + e.toString());
      endTask();
    }
  }

  setTaskInfo(bool processing, String taskName) {
    setProcessing = processing;
    setCurrentTask = taskName;
  }

  endTask() {
    setProcessing = false;
    setCurrentTask = '';
  }

  checkIstance() async {
    try {
      setTaskInfo(true, 'Checking thermostat istance');

      setHexAddress = await PreferencesUtil().getPrefString('contract_key');
      if(hexAddress != null && hexAddress.isNotEmpty) {
        setEthAddress = EthereumAddress.fromHex(hexAddress);

        deployExistingContract();
      } else {
        logger.w('Thermostat address not setted!');
        setInitialized = false;
        endTask();
      }
    }
    catch (e) {
      logger.e('Error while read contract key : ' + e.toString());
      setInitialized = false;
      endTask();
    }
  }

  Future<String> initializeSensorAddress(Credentials creds, EthereumAddress sensorAddress, BigInt sensorId) async {
    try {
      setTaskInfo(true, 'Initializing sensor address');
      final transaction =  await _web3client.sendTransaction(
          creds,
          Transaction.callContract(
              contract: _contract,
              function: _initializeSensorAddress,
              parameters: [sensorAddress, sensorId],
              from: await creds.extractAddress()
          ), fetchChainIdFromNetworkId: true
      );
      logger.i('initializeSensorAddress transaction : ' + transaction);
      chekcTransactionReceipt(Duration(seconds: 2), transaction, 'initializeSensorAddress').listen((transactionSuccess) {
        if(transactionSuccess) {
          endTask();
          logger.i('Transaction initializeSensorAddress done!');
        }
      });
      return transaction;
    }
    catch (e) {
      logger.e('Transaction initializeSensorAddress error : ' + e.toString());
      return null;
    }
  }

  Future<String> initializeThreshold(Credentials creds, BigInt threshold) async {
    final transaction =  await _web3client.sendTransaction(
        creds,
        Transaction.callContract(
            contract: _contract,
            function: _initializeThreshold,
            parameters: [threshold],
            from: await creds.extractAddress()
        ), fetchChainIdFromNetworkId: true
    );
    print('initializeThreshold transaction : ' + transaction);
    return transaction;
  }

  Future<String> initializeHeaterAddress(Credentials creds, EthereumAddress heaterAddress, BigInt heaterId) async {
    try {
      setTaskInfo(true, 'Initializing heater address');
      final transaction = await _web3client.sendTransaction(
          creds,
          Transaction.callContract(
              contract: _contract,
              function: _initializeHeaterAddress,
              parameters: [heaterAddress, heaterId],
              from: await creds.extractAddress()
          ), fetchChainIdFromNetworkId: true
      );
      logger.i('initializeHeaterAddress transaction : ' + transaction);
      chekcTransactionReceipt(Duration(seconds: 2), transaction, 'initializeHeaterAddress').listen((transactionSuccess) {
        if(transactionSuccess) {
          endTask();
          logger.i('Transaction initializeHeaterAddress done!');
        }
      });
      return transaction;
    }
    catch (e) {
      logger.e('Transaction initializeHeaterAddress error : ' + e.toString());
      return null;
    }
  }

  Future<String> initializeUserAddress(Credentials creds, EthereumAddress userAddress) async {
    try {
      setTaskInfo(true, 'Initializing user address');
      final transaction = await _web3client.sendTransaction(
          creds,
          Transaction.callContract(
              contract: _contract,
              function: _initializeUserAddress,
              parameters: [userAddress],
              from: await creds.extractAddress()
          ), fetchChainIdFromNetworkId: true
      );
      logger.i('InitializeUserAddress transaction created : ' + transaction);
      chekcTransactionReceipt(Duration(seconds: 5), transaction, 'initializeUserAddress').listen((transactionSuccess) {
        if(transactionSuccess) {
          endTask();
          setInitialized = true;
          logger.i('Transaction initializeUserAddress done!');
        }
      });
      return transaction;
    }
    catch (e) {
      logger.e('Transaction initializeUserAddress error : ' + e.toString());
      return null;
    }
  }


  Future<String> changeThresholdTemp(Credentials creds, BigInt newThreshold
  ) async {
    final transaction = await _web3client.sendTransaction(
      creds,
      Transaction.callContract(
        contract: _contract,
        function: _changeThreshold,
        parameters: [newThreshold],
        from: await creds.extractAddress()
      ), fetchChainIdFromNetworkId: true
    );
    print('changeThresholdTemp transaction : ' + transaction);
    return transaction;
  }

  Future<String> shutDownFun(BoolType shutDown, Credentials creds) async {
    final transaction = await _web3client.sendTransaction(
      creds,
      Transaction.callContract(
        contract: _contract,
        function: _shutDownFun,
        parameters: [shutDown],
        from: await creds.extractAddress()
      ), fetchChainIdFromNetworkId: true
    );
    print('shutDownFun transaction : ' + transaction);
    return transaction;
  }

  Future<String> destroyFun(BoolType distrupt, Credentials creds) async {
    final transaction = await _web3client.sendTransaction(
      creds,
      Transaction.callContract(
        contract: _contract,
        function: _destroyFun,
        parameters: [distrupt],
        from: await creds.extractAddress()
      ), fetchChainIdFromNetworkId: true
    );
    print('destroyFun transaction : ' + transaction);
    return transaction;
  }

  int getAverageTemperature() {
    if(rooms.length > 0) {
      int temperatureSum = 0;
      for(Room room in rooms) {
        if(room.sensor.actualTemp != null) {
          temperatureSum += room.sensor.actualTemp;
        }
      }
      return temperatureSum ~/ rooms.length;
    }
    return 0;
  }
}
